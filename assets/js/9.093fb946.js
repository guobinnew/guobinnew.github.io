(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{175:function(s,t,n){"use strict";n.r(t);var e=n(0),a=Object(e.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var s=this,t=s.$createElement,n=s._self._c||t;return n("div",{staticClass:"content"},[n("h1",{attrs:{id:"lionet简介"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#lionet简介","aria-hidden":"true"}},[s._v("#")]),s._v(" Lionet简介")]),s._v(" "),n("p",[s._v("based-component state machine engine， suitable for games and simulation")]),s._v(" "),n("h2",{attrs:{id:"principle"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#principle","aria-hidden":"true"}},[s._v("#")]),s._v(" Principle")]),s._v(" "),n("p",[s._v("模型体系包含2种组件：Atomic和Coupled， Coupled组件由若干Atomic和Coupled组成。")]),s._v(" "),n("ul",[n("li",[s._v("每个组件都是一个状态机，包含若干输入事件端口（Inport）、输出事件端口（Outport）和状态（Phase）")]),s._v(" "),n("li",[s._v("组件在若干状态之间变换，当状态发生变化时，可以向外发送事件")]),s._v(" "),n("li",[s._v("当组件接受到输入事件时，可以根据事件来决定下一步动作，继续保持当前状态或者切换状态")]),s._v(" "),n("li",[s._v("每个状态都有一个生命时间Sigma，当生命耗尽时，触发动作决定下一个状态")]),s._v(" "),n("li",[s._v("组件可以通过不断组合，形成十分复杂的Coupled组件")])]),s._v(" "),n("h3",{attrs:{id:"install"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#install","aria-hidden":"true"}},[s._v("#")]),s._v(" Install")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("  npm install orion-lionet\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("h2",{attrs:{id:"usage"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#usage","aria-hidden":"true"}},[s._v("#")]),s._v(" Usage")]),s._v(" "),n("h3",{attrs:{id:"lionet-atomic"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#lionet-atomic","aria-hidden":"true"}},[s._v("#")]),s._v(" Lionet.Atomic")]),s._v(" "),n("p",[s._v("Atomic组件基类，什么也不做，用于派生出Atomic组件模型\n需要实现的接口函数：")]),s._v(" "),n("ul",[n("li",[s._v("initialize()\n用于组件初始化")]),s._v(" "),n("li",[s._v("deltext（delta, msg)\n外部事件处理回调函数，当接受到外部事件时触发")]),s._v(" "),n("li",[s._v("deltint()\n内部状态转换回调函数，当状态的生命时间Sigma耗尽时触发")]),s._v(" "),n("li",[s._v("output()\n生成当前状态的输出事件，例如更新状态、发送通知等")])]),s._v(" "),n("p",[s._v("示例代码")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("import Lionet from ‘orion-lionet'\n\nclass Simple extends Lionet.Atomic {\n  constructor(config){\n    super(config)\n    this.__step__ = config.step\n    this.__msgid__ = 0\n  }\n\n\tinitialize(){\n    this.addInport('in')\n    this.addOutport('out')\n    this.holdIn(Lionet.Utils.devs.state.Passive, this.__step__)\n  }\n\n\tdeltext(delta, msg){\n    if (msg) {\n      for(let content of msg.contents()){\n        if (content.port === 'in') {\n          console.log('receiving event: ' + content.event.toJson())\n        }\n      }\n    }\n    this.resume(delta)\n  }\n\n\tdeltint(){\n    this.holdIn(Lionet.Utils.devs.state.Passive, this.__step__)\n  }\n\n\toutput(){\n    let msg = new Lionet.Message()\n    let evt = new Lionet.Event()\n    evt.setParam('Number', this.__msgid__++)\n    msg.setContent('out', evt)\n    return msg\n  }\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br"),n("span",{staticClass:"line-number"},[s._v("35")]),n("br"),n("span",{staticClass:"line-number"},[s._v("36")]),n("br"),n("span",{staticClass:"line-number"},[s._v("37")]),n("br"),n("span",{staticClass:"line-number"},[s._v("38")]),n("br")])]),n("h3",{attrs:{id:"atomicsimulator"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#atomicsimulator","aria-hidden":"true"}},[s._v("#")]),s._v(" AtomicSimulator")]),s._v(" "),n("h3",{attrs:{id:"demo"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#demo","aria-hidden":"true"}},[s._v("#")]),s._v(" Demo")]),s._v(" "),n("h2",{attrs:{id:"release-notes"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#release-notes","aria-hidden":"true"}},[s._v("#")]),s._v(" Release Notes")])])}],!1,null,null,null);a.options.__file="README.md";t.default=a.exports}}]);